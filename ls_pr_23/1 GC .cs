namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("БАЗОВАЯ ИНФОРМАЦИЯ О СИСТЕМЕ:\n-----------------------------\n");
            Console.ForegroundColor = ConsoleColor.White;

            Console.WriteLine($"Операционная система: {Environment.OSVersion}" +
                $"\nВерсия .NET Framework: {Environment.Version}");
            
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\nИНФОРМАЦИЯ О СБОРКЕ МУСОРА:\n---------------------------\n");
            Console.ForegroundColor = ConsoleColor.White;

            Console.WriteLine($"Количество байт в куче: {GC.GetTotalMemory(false)} " +
                $"\nМаксимальное количество поддерживаемых поколений объектов: {GC.MaxGeneration + 1}");

            UserInfo user1 = new UserInfo("Alex", 26);
            Console.WriteLine($"\nПоколение объекта user1:  {GC.GetGeneration(user1)}");

            for (int i = 0; i < 50000; i++)
            {
                UserInfo user = new UserInfo("Kate", 27);
            }

            // Намеренно вызовем сборку мусора
            GC.Collect(0, GCCollectionMode.Forced);
            GC.WaitForPendingFinalizers();
           
            Console.WriteLine("\nсборка мусора ...\n");

            Console.WriteLine("Поколение объекта user1(после работы GC): " + GC.GetGeneration(user1));


            Console.Read();
        }
    }

    class UserInfo
    {
        public string Name { set; get; }
        public int Age { set; get; }

        public UserInfo(string Name, int Age)
        {
            this.Name = Name;
            this.Age = Age;
        }
    }
}

/*
 Сборщик мусора .NET предназначен в основном для того, 
 чтобы управлять памятью вместо разработчиков. 
 Однако в очень редких случаях требуется принудительно запустить сборку мусора 
 с помощью метода GC.Collect():

    - Приложение приступает к выполнению блока кода, прерывание которого возможным 
      процессом сборки мусора является недопустимым.

    - Приложение только что закончило размещать чрезвычайно большое количество объектов 
      и нуждается в как можно скорейшем освобождении большого объема памяти.
 
 */

/*
 Метод	Описание

AddMemoryPressure(),
RemoveMemoryPressure()	
            Позволяют указывать числовое значение, отражающее "уровень срочности", 
            который вызывающий объект применяет в отношении к сборке мусора. 
            Следует иметь в виду, что эти методы должны изменять уровень давления в тандеме и, 
            следовательно, никогда не устранять больше давления, чем было добавлено

CancelFullGCNotification()	Отменяет уведомление о "сборке мусора"

Collect()	        Заставляет сборщик мусора провести сборку мусора. 
                    Должен быть перегружен так, чтобы указывать, объекты какого поколения подлежат сборке, 
                    а также какой режим сборки использовать (с помощью перечисления GCCollectionMode)

CollectionCount()	Возвращает числовое значение, показывающее, сколько раз объектам 
                    данного поколения удалось переживать процесс сборки мусора

GetGeneration()	    Возвращает информацию о том, к какому поколению в настоящий момент относится объект

GetTotalMemory()	Возвращает информацию о том, какой объем памяти (в байтах) в настоящий момент 
                    занят в управляемой куче. 
                    Булевский параметр указывает, должен ли вызов сначала дождаться выполнения сборки мусора, 
                    прежде чем возвращать результат

KeepAlive()	        Создает ссылку на объект, защищая его от "сборки мусора". 
                    Действие этой ссылки оканчивается после выполнения метода KeepAlive()

MaxGeneration	    Возвращает информацию о том, сколько максимум поколений поддерживается в целевой системе. 
                    В .NET 4.0 поддерживается всего три поколения: 0, 1 и 2

RegisterForFullGCNotification()	    Разрешает уведомление о "сборке мусора".
RemoveMemoryPressure()	            Задает в качестве параметра количество байтов, освобождаемых в неуправляемой области памяти
    
SuppressFinalize()	                Позволяет устанавливать флаг, указывающий, что для данного объекта 
                                    не должен вызываться его метод Finalize()

WaitForPendingFinalizers()	        Позволяет приостанавливать выполнение текущего потока до тех пор, 
                                    пока не будут финализированы все объекты, предусматривающие финализацию. 
                                    Обычно вызывается сразу же после вызова метода GC.Collect()

 */